# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    mailer_user: 'jan@creatiom.be'
    sonata.admin.security.mask.builder.class: Sonata\AdminBundle\Security\Acl\Permission\MaskBuilder
services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../src/{Entity,Security,Migrations,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    App\Controller\:
        resource: '../src/Controller'
        public: true
        tags: ['controller.service_arguments']
        
    App\Repository\AllianceRepository:
        arguments: ['@doctrine', 'App\Entity\Alliance']
        tags:
            - { name: doctrine.repository_service }
            
    App\Repository\TerritoryControlTowerRepository:
        arguments: ['@doctrine', 'App\Entity\TerritoryControlTower']
        tags:
            - { name: doctrine.repository_service }
            
    token_authenticator:
        public: true
        class: App\Security\TokenAuthenticator

    bossa_authenticator:
        public: true
        class: App\Security\BossaAuthenticator
        
    azine_hybrid_auth_service:
        public: true
        class:  Azine\HybridAuthBundle\Services\AzineHybridAuth
        arguments:
            $router:               "@router"
            $tokenStorage:      "@security.token_storage"
            $manager:        "@doctrine.orm.entity_manager"
            $config:
                endpoint_route:   "%azine_hybrid_auth_endpoint_route%"
                providers:        "%azine_hybrid_auth_providers%"
                debug_mode:       "%azine_hybrid_auth_debug%"
                debug_file:       "%azine_hybrid_auth_debug_file%"
            $storeForUser:   "%azine_hybrid_auth_store_for_user%"
            $storeAsCookie:  "%azine_hybrid_auth_store_as_cookie%"
            $expiresInDays:  "%azine_hybrid_auth_expires_in_days%"

    azine_business_networks_provider_service:
        public: true
        class:  Azine\HybridAuthBundle\Services\AzineMergedBusinessNetworksProvider
        arguments:
            $hybridAuth:     "@azine_hybrid_auth_service"
            $session:        "@session"
            $sorter:         "@azine_hybrid_auth_contact_sorter"
            $merger:         "@azine_hybrid_auth_contact_merger"
            $genderGuesser:  "@azine_hybrid_auth_gender_guesser"
            $contactFilter:  "@azine_hybrid_auth_contact_filter"
            $providers:      "%azine_hybrid_auth_providers%"

    azine_hybrid_auth_contact_filter_default:
        public: true
        class: Azine\HybridAuthBundle\Services\AzineContactFilter

    azine_hybrid_auth_contact_merger_default:
        public: true
        class: Azine\HybridAuthBundle\Services\AzineContactMerger

    azine_hybrid_auth_contact_sorter_default:
        public: true
        class: Azine\HybridAuthBundle\Services\AzineContactSorter

    azine_hybrid_auth_gender_guesser_default:
        public: true
        class: Azine\HybridAuthBundle\Services\AzineGenderGuesser

    http.utils.class:
        public: true
        class: Symfony\Component\Security\Http\HttpUtils

    hwi_oauth.resource_ownermap.admin:
        class: HWI\Bundle\OAuthBundle\Security\Http\ResourceOwnerMap
        arguments: [ '@security.http_utils', [], [] ]

    gedmo.listener.softdeleteable:
        class: Gedmo\SoftDeleteable\SoftDeleteableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]

    security.acl.permission.map:
        class: Sonata\AdminBundle\Security\Acl\Permission\AdminPermissionMap

    admin.island:
        class: App\Admin\IslandAdmin
        arguments: [~, App\Entity\Island, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "island.management", label: "Islands", icon: "<i class=\"fa fa-globe\"></i>" }
        public: true

    admin.island_creator:
        class: App\Admin\IslandCreatorAdmin
        arguments: [~, App\Entity\IslandCreator, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "island.management", label: "Island creators", icon: "<i class=\"fa fa-globe\"></i>" }
        public: true

    admin.island_image:
        class: App\Admin\IslandImageAdmin
        arguments: [~, App\Entity\IslandImage, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: 'images', show_in_dashboard: false }
        public: true

    admin.island_pve_metals:
        class: App\Admin\IslandPVEMetalAdmin
        arguments: [~, App\Entity\IslandPVEMetal, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, group: "materials", label: 'Island PVE Metals', show_in_dashboard: false }
        public: true

    admin.report:
        class: App\Admin\ReportAdmin
        arguments: [~, App\Entity\Report, App\Controller\Admin\ReportAdminController]
        tags:
        - { name: sonata.admin, manager_type: orm, group: "reporting", label: 'Incoming reports', icon: "<i class=\"fa fa-bug\"></i>" }
        public: true

    admin.island_trees:
        class: App\Admin\IslandTreeAdmin
        arguments: [~, App\Entity\IslandTree, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, group: "materials", label: 'Island Trees', show_in_dashboard: false }
        public: true

    admin.island_pvp_metals:
        class: App\Admin\IslandPVPMetalAdmin
        arguments: [~, App\Entity\IslandPVPMetal, ~]
        tags:
        - { name: sonata.admin, manager_type: orm, group: "materials", label: 'Island PVP Metals', show_in_dashboard: false }
        public: true

    admin.treetype:
        class: App\Admin\TreeTypeAdmin
        arguments: [~, App\Entity\TreeType, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "type.management", label: "Tree types", icon: "<i class=\"fa fa-diamond\"></i>" }
        public: true

    admin.metaltype:
        class: App\Admin\MetalTypeAdmin
        arguments: [~, App\Entity\MetalType, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "type.management", label: "Metal types", icon: "<i class=\"fa fa-diamond\"></i>" }
        public: true
        
    admin.alliance:
        class:  App\Admin\AllianceAdmin
        arguments: [~, App\Entity\Alliance, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "territory.management", label: "Alliances", icon: "<i class=\"fa fa-users\"></i>" }
        public: true
        
    admin.tower:
        class:  App\Admin\TerritoryControlTowerAdmin
        arguments: [~, App\Entity\TerritoryControlTower, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: "territory.management", label: "Territory Control Towers", icon: "<i class=\"fa fa-flag\"></i>" }
        public: true
